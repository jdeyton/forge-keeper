# coding: utf-8
"""
This module provides a class for one of the models described by the API.
"""

from __future__ import absolute_import

from datetime import datetime

from digital.forge.data.models.base_model_ import Model
from digital.forge.data import util


class Drone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator.

    (https://openapi-generator.tech)

    Do not edit the class manually.
    """

    openapi_types = {
        'uuid': str,
        'name': str,
        'description': str,
        'creation_time': datetime
    }

    attribute_map = {
        'uuid': 'uuid',
        'name': 'name',
        'description': 'description',
        'creation_time': 'creationTime'
    }

    def __init__(self, uuid=None, name=None, description=None, creation_time=None):  # noqa: E501
        """Drone - a model defined in OpenAPI

        :param uuid: The uuid of this Drone.  # noqa: E501
        :type uuid: str
        :param name: The name of this Drone.  # noqa: E501
        :type name: str
        :param description: The description of this Drone.  # noqa: E501
        :type description: str
        :param creation_time: The creation_time of this Drone.  # noqa: E501
        :type creation_time: datetime
        """

        if uuid is None:
            raise ValueError('`uuid` is a required value')
        self._uuid = uuid
        if name is None:
            raise ValueError('`name` is a required value')
        self._name = name
        if description is None:
            raise ValueError('`description` is a required value')
        self._description = description
        if creation_time is None:
            raise ValueError('`creation_time` is a required value')
        self._creation_time = creation_time

    @classmethod
    def from_dict(cls, dikt) -> 'Drone':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Drone of this Drone.  # noqa: E501
        :rtype: Drone
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self):
        """Gets the uuid of this Drone.

        A unique identifier for the drone.  # noqa: E501

        :return: The uuid of this Drone.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Drone.

        A unique identifier for the drone.  # noqa: E501

        :param uuid: The uuid of this Drone.
        :type uuid: str
        """

        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")

        if uuid is not None and not isinstance(uuid, str):
            raise ValueError("Invalid value for `uuid`, must be a `str`")

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this Drone.

        A human readable name for the drone.  # noqa: E501

        :return: The name of this Drone.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Drone.

        A human readable name for the drone.  # noqa: E501

        :param name: The name of this Drone.
        :type name: str
        """

        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        if name is not None and not isinstance(name, str):
            raise ValueError("Invalid value for `name`, must be a `str`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this Drone.

        A description of the drone.  # noqa: E501

        :return: The description of this Drone.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Drone.

        A description of the drone.  # noqa: E501

        :param description: The description of this Drone.
        :type description: str
        """

        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        if description is not None and not isinstance(description, str):
            raise ValueError("Invalid value for `description`, must be a `str`")

        self._description = description

    @property
    def creation_time(self):
        """Gets the creation_time of this Drone.

        The date the drone was created or initialized.  # noqa: E501

        :return: The creation_time of this Drone.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Drone.

        The date the drone was created or initialized.  # noqa: E501

        :param creation_time: The creation_time of this Drone.
        :type creation_time: datetime
        """

        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        if creation_time is not None and not isinstance(creation_time, datetime):
            raise ValueError("Invalid value for `creation_time`, must be a `datetime`")

        self._creation_time = creation_time
