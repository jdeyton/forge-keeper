# coding: utf-8
"""
This module provides a class for one of the models described by the API.
"""

from __future__ import absolute_import


from digital.forge.data.models.base_model_ import Model
from digital.forge.data import util


class DroneInputs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator.

    (https://openapi-generator.tech)

    Do not edit the class manually.
    """

    openapi_types = {
        'name': str,
        'description': str
    }

    attribute_map = {
        'name': 'name',
        'description': 'description'
    }

    def __init__(self, name=None, description=None):  # noqa: E501
        """DroneInputs - a model defined in OpenAPI

        :param name: The name of this DroneInputs.  # noqa: E501
        :type name: str
        :param description: The description of this DroneInputs.  # noqa: E501
        :type description: str
        """

        if name is None:
            raise ValueError('`name` is a required value')
        self._name = name
        if description is None:
            raise ValueError('`description` is a required value')
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'DroneInputs':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DroneInputs of this DroneInputs.  # noqa: E501
        :rtype: DroneInputs
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this DroneInputs.

        A human readable name for the drone.  # noqa: E501

        :return: The name of this DroneInputs.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DroneInputs.

        A human readable name for the drone.  # noqa: E501

        :param name: The name of this DroneInputs.
        :type name: str
        """

        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        if name is not None and not isinstance(name, str):
            raise ValueError("Invalid value for `name`, must be a `str`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this DroneInputs.

        A description of the drone.  # noqa: E501

        :return: The description of this DroneInputs.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DroneInputs.

        A description of the drone.  # noqa: E501

        :param description: The description of this DroneInputs.
        :type description: str
        """

        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        if description is not None and not isinstance(description, str):
            raise ValueError("Invalid value for `description`, must be a `str`")

        self._description = description
