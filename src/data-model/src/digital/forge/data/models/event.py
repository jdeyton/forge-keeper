# coding: utf-8
"""
This module provides a class for one of the models described by the API.
"""

from __future__ import absolute_import

from datetime import datetime

from digital.forge.data.models.base_model_ import Model
from digital.forge.data import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator.

    (https://openapi-generator.tech)

    Do not edit the class manually.
    """

    openapi_types = {
        'archive_uuid': str,
        'drone_uuid': str,
        'event_time': datetime,
        'event_value': str
    }

    attribute_map = {
        'archive_uuid': 'archiveUUID',
        'drone_uuid': 'droneUUID',
        'event_time': 'eventTime',
        'event_value': 'eventValue'
    }

    def __init__(self, archive_uuid=None, drone_uuid=None, event_time=None, event_value=None):  # noqa: E501
        """Event - a model defined in OpenAPI

        :param archive_uuid: The archive_uuid of this Event.  # noqa: E501
        :type archive_uuid: str
        :param drone_uuid: The drone_uuid of this Event.  # noqa: E501
        :type drone_uuid: str
        :param event_time: The event_time of this Event.  # noqa: E501
        :type event_time: datetime
        :param event_value: The event_value of this Event.  # noqa: E501
        :type event_value: str
        """

        if archive_uuid is None:
            raise ValueError('`archive_uuid` is a required value')
        self._archive_uuid = archive_uuid
        if drone_uuid is None:
            raise ValueError('`drone_uuid` is a required value')
        self._drone_uuid = drone_uuid
        if event_time is None:
            raise ValueError('`event_time` is a required value')
        self._event_time = event_time
        if event_value is None:
            raise ValueError('`event_value` is a required value')
        self._event_value = event_value

    @classmethod
    def from_dict(cls, dikt) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Event of this Event.  # noqa: E501
        :rtype: Event
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive_uuid(self):
        """Gets the archive_uuid of this Event.

        A unique identifier for the archive in which this data is stored.  # noqa: E501

        :return: The archive_uuid of this Event.
        :rtype: str
        """
        return self._archive_uuid

    @archive_uuid.setter
    def archive_uuid(self, archive_uuid):
        """Sets the archive_uuid of this Event.

        A unique identifier for the archive in which this data is stored.  # noqa: E501

        :param archive_uuid: The archive_uuid of this Event.
        :type archive_uuid: str
        """

        if archive_uuid is None:
            raise ValueError("Invalid value for `archive_uuid`, must not be `None`")

        if archive_uuid is not None and not isinstance(archive_uuid, str):
            raise ValueError("Invalid value for `archive_uuid`, must be a `str`")

        self._archive_uuid = archive_uuid

    @property
    def drone_uuid(self):
        """Gets the drone_uuid of this Event.

        A unique identifier for the drone that observed this event.  # noqa: E501

        :return: The drone_uuid of this Event.
        :rtype: str
        """
        return self._drone_uuid

    @drone_uuid.setter
    def drone_uuid(self, drone_uuid):
        """Sets the drone_uuid of this Event.

        A unique identifier for the drone that observed this event.  # noqa: E501

        :param drone_uuid: The drone_uuid of this Event.
        :type drone_uuid: str
        """

        if drone_uuid is None:
            raise ValueError("Invalid value for `drone_uuid`, must not be `None`")

        if drone_uuid is not None and not isinstance(drone_uuid, str):
            raise ValueError("Invalid value for `drone_uuid`, must be a `str`")

        self._drone_uuid = drone_uuid

    @property
    def event_time(self):
        """Gets the event_time of this Event.

        The time of the data measurement/collection.  # noqa: E501

        :return: The event_time of this Event.
        :rtype: datetime
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this Event.

        The time of the data measurement/collection.  # noqa: E501

        :param event_time: The event_time of this Event.
        :type event_time: datetime
        """

        if event_time is None:
            raise ValueError("Invalid value for `event_time`, must not be `None`")

        if event_time is not None and not isinstance(event_time, datetime):
            raise ValueError("Invalid value for `event_time`, must be a `datetime`")

        self._event_time = event_time

    @property
    def event_value(self):
        """Gets the event_value of this Event.

        The archived data point collected by the drone at the event time.  # noqa: E501

        :return: The event_value of this Event.
        :rtype: str
        """
        return self._event_value

    @event_value.setter
    def event_value(self, event_value):
        """Sets the event_value of this Event.

        The archived data point collected by the drone at the event time.  # noqa: E501

        :param event_value: The event_value of this Event.
        :type event_value: str
        """

        if event_value is None:
            raise ValueError("Invalid value for `event_value`, must not be `None`")

        if event_value is not None and not isinstance(event_value, str):
            raise ValueError("Invalid value for `event_value`, must be a `str`")

        self._event_value = event_value
