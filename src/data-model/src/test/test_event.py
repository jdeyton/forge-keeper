# coding: utf-8
"""
    Forge Keeper - Conductor

    This API focuses on managing data archives and drones that submit data to them.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: not@vailable
    Generated by: https://openapi-generator.tech
"""

from __future__ import absolute_import

from datetime import datetime
import unittest
import uuid

from digital.forge.data.models.event import Event


class TestEvent(unittest.TestCase):
    """Event unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    @staticmethod
    def make_instance():
        """Returns an instance with example values as defined in the API."""
        return Event(
            archive_uuid='7b9aed83-ed5a-47bf-a02a-8530369d545c',
            drone_uuid='8b9aed83-ed5a-47bf-a02a-8530369d545d',
            event_time='2020-07-25T22:01:56Z',
            event_value='83.5'
        )

    def test_event(self):
        """Test Event"""
        instance = TestEvent.make_instance()
        self.assertEqual(
            '7b9aed83-ed5a-47bf-a02a-8530369d545c',
            instance.archive_uuid
        )
        self.assertEqual(
            '8b9aed83-ed5a-47bf-a02a-8530369d545d',
            instance.drone_uuid
        )
        self.assertEqual('2020-07-25T22:01:56Z', instance.event_time)
        self.assertEqual('83.5', instance.event_value)

    def test_archive_uuid(self):
        """Test the "archive_uuid" property"""
        instance = TestEvent.make_instance()

        # This value can't be set to null.
        with self.assertRaises(
                ValueError,
                msg='archive_uuid cannot be set to null'
        ):
            instance.archive_uuid = None

        # Check some valid values.
        valid_values = [
            '06c3d4b7-baef-42a7-a020-5aa0851c5b43',
            str(uuid.uuid4()),
        ]
        for value in valid_values:
            instance.archive_uuid = value
            self.assertEqual(
                value,
                instance.archive_uuid,
                msg='archive_uuid can be set to valid value "%r"' % (value)
            )

        # Check some invalid values raise ValueError exceptions.
        invalid_values = [
            0,
            [],
            {},
        ]
        for value in invalid_values:
            with self.assertRaises(
                    ValueError,
                    msg='archive_uuid cannot be set to an invalid value'
            ):
                instance.archive_uuid = value

    def test_drone_uuid(self):
        """Test the "drone_uuid" property"""
        instance = TestEvent.make_instance()

        # This value can't be set to null.
        with self.assertRaises(
                ValueError,
                msg='drone_uuid cannot be set to null'
        ):
            instance.drone_uuid = None

        # Check some valid values.
        valid_values = [
            'b114a3a1-2c24-4e61-8453-49652fef4948',
            str(uuid.uuid4()),
        ]
        for value in valid_values:
            instance.drone_uuid = value
            self.assertEqual(
                value,
                instance.drone_uuid,
                msg='drone_uuid can be set to valid value "%r"' % (value)
            )

        # Check some invalid values raise ValueError exceptions.
        invalid_values = [
            -1,
            [],
            {},
        ]
        for value in invalid_values:
            with self.assertRaises(
                    ValueError,
                    msg='drone_uuid cannot be set to an invalid value'
            ):
                instance.drone_uuid = value

    def test_event_time(self):
        """Test the "event_time" property"""
        instance = TestEvent.make_instance()

        # This value can't be set to null.
        with self.assertRaises(
                ValueError,
                msg='event_time cannot be set to null'
        ):
            instance.event_time = None

        # Check some valid values.
        valid_values = [
            datetime(2063, 4, 5),
            datetime(2157, 1, 1, 12, 34, 56),
        ]
        for value in valid_values:
            instance.event_time = value
            self.assertEqual(
                value,
                instance.event_time,
                msg='event_time can be set to valid value "%r"' % (value)
            )

        # Check some invalid values raise ValueError exceptions.
        invalid_values = [
            'not a date',
            19900102,
            '2020-07-25',
            [],
            {},
        ]
        for value in invalid_values:
            with self.assertRaises(
                    ValueError,
                    msg='event_time cannot be set to an invalid value'
            ):
                instance.event_time = value

    def test_event_value(self):
        """Test the "event_value" property"""
        instance = TestEvent.make_instance()

        # This value can't be set to null.
        with self.assertRaises(
                ValueError,
                msg='event_value cannot be set to null'
        ):
            instance.event_value = None

        # Check some valid values.
        valid_values = [
            'true',
            '1',
            '-42',
            '98.6',
        ]
        for value in valid_values:
            instance.event_value = value
            self.assertEqual(
                value,
                instance.event_value,
                msg='event_value can be set to valid value "%r"' % (value)
            )

        # Check some invalid values raise ValueError exceptions.
        invalid_values = [
            [],
            {},
        ]
        for value in invalid_values:
            with self.assertRaises(
                    ValueError,
                    msg='event_value cannot be set to an invalid value'
            ):
                instance.event_value = value

    def test_equals(self):
        """Test equality operations"""
        obj_a = TestEvent.make_instance()
        obj_b = TestEvent.make_instance()
        obj_c = TestEvent.make_instance()

        # Create a different object.
        obj_x = TestEvent.make_instance()
        obj_x.event_value = '99'

        self.assertEqual(obj_a, obj_a, msg='Reflexive property: a == a')
        self.assertEqual(obj_a, obj_b, msg='Symmetric property: a == b')
        self.assertEqual(obj_b, obj_a, msg='Symmetric property: b == a')
        self.assertEqual(obj_b, obj_c, msg='Transitive property: b == c')
        self.assertEqual(obj_a, obj_c, msg='Transitive property: a == c')

        self.assertNotEqual(obj_a, obj_x, msg='Not equals: a != x')

        self.assertNotEqual(obj_a, 'foobar', msg='The object is not a string')
        self.assertNotEqual(obj_a, None, msg='The object is not null')


if __name__ == '__main__':
    unittest.main()
