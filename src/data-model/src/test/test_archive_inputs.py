# coding: utf-8
"""
    Forge Keeper - Conductor

    This API focuses on managing data archives and drones that submit data to them.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: not@vailable
    Generated by: https://openapi-generator.tech
"""

from __future__ import absolute_import

import unittest

from digital.forge.data.models.archive_inputs import ArchiveInputs


class TestArchiveInputs(unittest.TestCase):
    """ArchiveInputs unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    @staticmethod
    def make_instance():
        """Returns an instance with example values as defined in the API."""
        return ArchiveInputs(
            name='temperature',
            description='An archive of historical temperature data.',
            data_type='float',
            units='C'
        )

    def test_archive_inputs(self):
        """Test ArchiveInputs"""
        instance = TestArchiveInputs.make_instance()
        self.assertEqual('temperature', instance.name)
        self.assertEqual(
            'An archive of historical temperature data.',
            instance.description
        )
        self.assertEqual('float', instance.data_type)
        self.assertEqual('C', instance.units)

    def test_name(self):
        """Test the "name" property"""
        instance = TestArchiveInputs.make_instance()

        # This value can't be set to null.
        with self.assertRaises(
                ValueError,
                msg='name cannot be set to null'
        ):
            instance.name = None

        # Check some valid values.
        valid_values = [
            'leonardo',
            'Michelangelo',
            'Donnie',
            'r4ph!',
        ]
        for value in valid_values:
            instance.name = value
            self.assertEqual(
                value,
                instance.name,
                msg='name can be set to valid value "%r"' % (value)
            )

        # Check some invalid values raise ValueError exceptions.
        invalid_values = [
            [],
            {},
        ]
        for value in invalid_values:
            with self.assertRaises(
                    ValueError,
                    msg='name cannot be set to an invalid value'
            ):
                instance.name = value

    def test_description(self):
        """Test the "description" property"""
        instance = TestArchiveInputs.make_instance()

        # This value can't be set to null.
        with self.assertRaises(
                ValueError,
                msg='description cannot be set to null'
        ):
            instance.description = None

        # Check some valid values.
        valid_values = [
            'this is a string',
            '',
            '12345678',
        ]
        for value in valid_values:
            instance.description = value
            self.assertEqual(
                value,
                instance.description,
                msg='description can be set to valid value "%r"' % (value)
            )

        # Check some invalid values raise ValueError exceptions.
        invalid_values = [
            [],
            {},
        ]
        for value in invalid_values:
            with self.assertRaises(
                    ValueError,
                    msg='description cannot be set to an invalid value'
            ):
                instance.description = value

    def test_data_type(self):
        """Test the "data_type" property"""
        instance = TestArchiveInputs.make_instance()

        # This value can't be set to null.
        with self.assertRaises(
                ValueError,
                msg='data_type cannot be set to null'
        ):
            instance.data_type = None

        # Check some valid values.
        valid_values = [
            'integer',
            'float',
            'boolean',
            'foo',
        ]
        for value in valid_values:
            instance.data_type = value
            self.assertEqual(
                value,
                instance.data_type,
                msg='data_type can be set to valid value "%r"' % (value)
            )

        # Check some invalid values raise ValueError exceptions.
        invalid_values = [
            [],
            {},
        ]
        for value in invalid_values:
            with self.assertRaises(
                    ValueError,
                    msg='data_type cannot be set to an invalid value'
            ):
                instance.data_type = value

    def test_units(self):
        """Test the "units" property"""
        instance = TestArchiveInputs.make_instance()

        # This value can't be set to null.
        with self.assertRaises(
                ValueError,
                msg='units cannot be set to null'
        ):
            instance.units = None

        # Check some valid values.
        valid_values = [
            'centigrade',
            'celsius',
            'relative humidity',
            'units of awesomeness',
            '',
        ]
        for value in valid_values:
            instance.units = value
            self.assertEqual(
                value,
                instance.units,
                msg='units can be set to valid value "%r"' % (value)
            )

        # Check some invalid values raise ValueError exceptions.
        invalid_values = [
            [],
            {},
        ]
        for value in invalid_values:
            with self.assertRaises(
                    ValueError,
                    msg='units cannot be set to an invalid value'
            ):
                instance.units = value

    def test_equals(self):
        """Test equality operations"""
        obj_a = TestArchiveInputs.make_instance()
        obj_b = TestArchiveInputs.make_instance()
        obj_c = TestArchiveInputs.make_instance()

        # Create a different object.
        obj_x = TestArchiveInputs.make_instance()
        obj_x.name = 'guilty spark'

        self.assertEqual(obj_a, obj_a, msg='Reflexive property: a == a')
        self.assertEqual(obj_a, obj_b, msg='Symmetric property: a == b')
        self.assertEqual(obj_b, obj_a, msg='Symmetric property: b == a')
        self.assertEqual(obj_b, obj_c, msg='Transitive property: b == c')
        self.assertEqual(obj_a, obj_c, msg='Transitive property: a == c')

        self.assertNotEqual(obj_a, obj_x, msg='Not equals: a != x')

        self.assertNotEqual(obj_a, 'foobar', msg='The object is not a string')
        self.assertNotEqual(obj_a, None, msg='The object is not null')


if __name__ == '__main__':
    unittest.main()
