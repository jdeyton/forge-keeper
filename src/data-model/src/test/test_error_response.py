# coding: utf-8
"""
    Forge Keeper - Conductor

    This API focuses on managing data archives and drones that submit data to them.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: not@vailable
    Generated by: https://openapi-generator.tech
"""

from __future__ import absolute_import

import unittest

from digital.forge.data.models.error_response import ErrorResponse


class TestErrorResponse(unittest.TestCase):
    """ErrorResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    @staticmethod
    def make_instance():
        """Returns an instance with example values as defined in the API."""
        return ErrorResponse(
            code=42,
            message='Something went wrong when computing the ultimate answer.'
        )

    def test_error_response(self):
        """Test ErrorResponse"""
        instance = TestErrorResponse.make_instance()
        self.assertEqual(42, instance.code)
        self.assertEqual(
            'Something went wrong when computing the ultimate answer.',
            instance.message
        )

    def test_code(self):
        """Test the "code" property"""
        instance = TestErrorResponse.make_instance()

        # This value can't be set to null.
        with self.assertRaises(
                ValueError,
                msg='code cannot be set to null'
        ):
            instance.code = None

        # Check some valid values.
        valid_values = [
            0,
            1,
            9000,
        ]
        for value in valid_values:
            instance.code = value
            self.assertEqual(
                value,
                instance.code,
                msg='code can be set to valid value "%r"' % (value)
            )

        # Check some invalid values raise ValueError exceptions.
        invalid_values = [
            'one'
            'eleventy-one',
            'schfifty-five',
            [],
            {},
        ]
        for value in invalid_values:
            with self.assertRaises(
                    ValueError,
                    msg='code cannot be set to an invalid value'
            ):
                instance.code = value

    def test_message(self):
        """Test the "message" property"""
        instance = TestErrorResponse.make_instance()

        # This value can't be set to null.
        with self.assertRaises(
                ValueError,
                msg='message cannot be set to null'
        ):
            instance.message = None

        # Check some valid values.
        valid_values = [
            'This message is brought to you by',
            'A coder in a basement.',
            'I\'m  being serious.',
            'But at least it\'s my basement.',
        ]
        for value in valid_values:
            instance.message = value
            self.assertEqual(
                value,
                instance.message,
                msg='message can be set to valid value "%r"' % (value)
            )

        # Check some invalid values raise ValueError exceptions.
        invalid_values = [
            676869,
            [],
            {},
        ]
        for value in invalid_values:
            with self.assertRaises(
                    ValueError,
                    msg='message cannot be set to an invalid value'
            ):
                instance.message = value

    def test_equals(self):
        """Test equality operations"""
        obj_a = TestErrorResponse.make_instance()
        obj_b = TestErrorResponse.make_instance()
        obj_c = TestErrorResponse.make_instance()

        # Create a different object.
        obj_x = TestErrorResponse.make_instance()
        obj_x.code += 1

        self.assertEqual(obj_a, obj_a, msg='Reflexive property: a == a')
        self.assertEqual(obj_a, obj_b, msg='Symmetric property: a == b')
        self.assertEqual(obj_b, obj_a, msg='Symmetric property: b == a')
        self.assertEqual(obj_b, obj_c, msg='Transitive property: b == c')
        self.assertEqual(obj_a, obj_c, msg='Transitive property: a == c')

        self.assertNotEqual(obj_a, obj_x, msg='Not equals: a != x')

        self.assertNotEqual(obj_a, 'foobar', msg='The object is not a string')
        self.assertNotEqual(obj_a, None, msg='The object is not null')


if __name__ == '__main__':
    unittest.main()
