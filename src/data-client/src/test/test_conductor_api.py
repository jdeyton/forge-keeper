# coding: utf-8
"""
    Forge Keeper - Conductor

    This API focuses on managing data archives and drones that submit data to
    them.

    The version of the OpenAPI document: 1.0.0
    Contact: not@vailable
    Generated by: https://openapi-generator.tech
"""

from __future__ import absolute_import

from datetime import datetime
import unittest
from unittest.mock import patch
from urllib3.response import HTTPResponse

from digital.forge.data.models import Archive
from digital.forge.data.models import ArchiveInputs
from digital.forge.data.models import Drone
from digital.forge.data.models import DroneInputs

from digital.forge.data.api.conductor_api import ConductorApi
from digital.forge.data.exceptions import ApiException
from digital.forge.data.rest import RESTResponse


class TestConductorApi(unittest.TestCase):
    """ConductorApi unit test stubs"""

    def setUp(self):
        self.api = None

        self.archive_uuid = '870025c6-78ec-4de8-a394-8049483d923f'
        self.drone_uuid = 'a7742c3f-6b78-42a0-aa85-bd4a5214999f'

        self.example_archive_inputs = ArchiveInputs(
            name='example-archive',
            description='for testing',
            data_type='example-type',
            units='example-units',
        )

        self.example_archive = Archive(
            uuid=self.archive_uuid,
            name='example-archive',
            description='for testing',
            data_type='example-type',
            units='example-units',
            creation_time=datetime(2020, 7, 31, 21, 25, 33, 416559)
        )

        self.example_archive_raw = b'{\n  "creationTime": "2020-07-31 21:25:33.416559",\n  "dataType": "example-type",\n "description": "for testing",\n  "name": "example-archive",\n  "units": "example-units",\n "uuid": "870025c6-78ec-4de8-a394-8049483d923f"\n}\n'

        self.example_drone_inputs = DroneInputs(
            name='example-drone',
            description='for testing',
        )

        self.example_drone = Drone(
            uuid=self.drone_uuid,
            name='example-drone',
            description='for testing',
            creation_time=datetime(2020, 7, 31, 21, 24, 48, 872605)
        )

        self.example_drone_raw = b'{\n  "creationTime": "2020-07-31 21:24:48.872605",\n  "description": "for testing",\n  "name": "example-drone",\n  "uuid": "a7742c3f-6b78-42a0-aa85-bd4a5214999f"\n}\n'

    def tearDown(self):
        pass

    @patch('digital.forge.data.rest.urllib3.PoolManager')
    def test_add_archive(self, mock_constructor):
        """Test case for add_archive

        Add a archive with a simulated success.
        """
        fake_response = RESTResponse(HTTPResponse(
            body=self.archive_uuid.encode('utf-8'),
            status=200,
        ))
        mock_constructor.return_value.request.return_value = fake_response

        self.api = ConductorApi()

        result = self.api.add_archive(
            archive_inputs=self.example_archive_inputs
        )

        self.assertEqual(self.archive_uuid, result)

    @patch('digital.forge.data.rest.urllib3.PoolManager')
    def test_add_archive_failed(self, mock_constructor):
        """Test case for add_archive

        Add a archive with a simulated failure.
        """
        fake_response = RESTResponse(HTTPResponse(
            body=b'"Failure"\\n',
            status=400,
        ))
        mock_constructor.return_value.request.return_value = fake_response

        self.api = ConductorApi()

        with self.assertRaises(ApiException):
            self.api.add_archive(archive_inputs=self.example_archive_inputs)

    @patch('digital.forge.data.rest.urllib3.PoolManager')
    def test_add_drone(self, mock_constructor):
        """Test case for add_drone

        Add a drone with a simulated success.
        """
        fake_response = RESTResponse(HTTPResponse(
            body=self.drone_uuid.encode('utf-8'),
            status=200,
        ))
        mock_constructor.return_value.request.return_value = fake_response

        self.api = ConductorApi()

        result = self.api.add_drone(drone_inputs=self.example_drone_inputs)

        self.assertEqual(self.drone_uuid, result)

    @patch('digital.forge.data.rest.urllib3.PoolManager')
    def test_add_drone_failed(self, mock_constructor):
        """Test case for add_drone

        Add a drone with a simulated failure.
        """
        fake_response = RESTResponse(HTTPResponse(
            body=b'"Failure"\\n',
            status=400,
        ))
        mock_constructor.return_value.request.return_value = fake_response

        self.api = ConductorApi()

        with self.assertRaises(ApiException):
            self.api.add_drone(drone_inputs=self.example_drone_inputs)

    @patch('digital.forge.data.rest.urllib3.PoolManager')
    def test_get_archive(self, mock_constructor):
        """Test case for get_archive

        Get a archive's info with simulated success.
        """
        fake_response = RESTResponse(HTTPResponse(
            body=self.example_archive_raw,
            status=200,
        ))
        mock_constructor.return_value.request.return_value = fake_response

        self.api = ConductorApi()

        result = self.api.get_archive(archive_uuid=self.archive_uuid)

        self.assertEqual(self.example_archive, result)

    @patch('digital.forge.data.rest.urllib3.PoolManager')
    def test_get_archive_failed(self, mock_constructor):
        """Test case for get_archive

        Get a archive's info with simulated failure.
        """
        fake_response = RESTResponse(HTTPResponse(
            body=b'"Failure"\\n',
            status=404,
        ))
        mock_constructor.return_value.request.return_value = fake_response

        self.api = ConductorApi()

        with self.assertRaises(ApiException):
            self.api.get_archive(archive_uuid=self.archive_uuid)

    @patch('digital.forge.data.rest.urllib3.PoolManager')
    def test_get_archives(self, mock_constructor):
        """Test case for get_archives

        Show all archives with simulated success.
        """
        fake_response = RESTResponse(HTTPResponse(
            body=b'[\n' + self.example_archive_raw + b']\n',
            status=200,
        ))
        mock_constructor.return_value.request.return_value = fake_response

        self.api = ConductorApi()

        result = self.api.get_archives()

        self.assertEqual([self.example_archive], result)

    @patch('digital.forge.data.rest.urllib3.PoolManager')
    def test_get_archives_failed(self, mock_constructor):
        """Test case for get_archives

        Show all archives with simulated failure.
        """
        fake_response = RESTResponse(HTTPResponse(
            body=b'"Failure"\\n',
            status=400,
        ))
        mock_constructor.return_value.request.return_value = fake_response

        self.api = ConductorApi()

        with self.assertRaises(ApiException):
            self.api.get_archives()

    @patch('digital.forge.data.rest.urllib3.PoolManager')
    def test_get_drone(self, mock_constructor):
        """Test case for get_drone

        Get a drone's info with simulated success.
        """
        fake_response = RESTResponse(HTTPResponse(
            body=self.example_drone_raw,
            status=200,
        ))
        mock_constructor.return_value.request.return_value = fake_response

        self.api = ConductorApi()

        result = self.api.get_drone(drone_uuid=self.drone_uuid)

        self.assertEqual(self.example_drone, result)

    @patch('digital.forge.data.rest.urllib3.PoolManager')
    def test_get_drone_failed(self, mock_constructor):
        """Test case for get_drone

        Get a drone's info with simulated failure.
        """
        fake_response = RESTResponse(HTTPResponse(
            body=b'"Failure"\\n',
            status=404,
        ))
        mock_constructor.return_value.request.return_value = fake_response

        self.api = ConductorApi()

        with self.assertRaises(ApiException):
            self.api.get_drone(drone_uuid=self.drone_uuid)

    @patch('digital.forge.data.rest.urllib3.PoolManager')
    def test_get_drones(self, mock_constructor):
        """Test case for get_drones

        Show all drones with simulated success.
        """
        fake_response = RESTResponse(HTTPResponse(
            body=b'[\n' + self.example_drone_raw + b']\n',
            status=200,
        ))
        mock_constructor.return_value.request.return_value = fake_response

        self.api = ConductorApi()

        result = self.api.get_drones()

        self.assertEqual([self.example_drone], result)

    @patch('digital.forge.data.rest.urllib3.PoolManager')
    def test_get_drones_failed(self, mock_constructor):
        """Test case for get_drones

        Show all drones with simulated failure.
        """
        fake_response = RESTResponse(HTTPResponse(
            body=b'"Failure"\\n',
            status=400,
        ))
        mock_constructor.return_value.request.return_value = fake_response

        self.api = ConductorApi()

        with self.assertRaises(ApiException):
            self.api.get_drones()

    @patch('digital.forge.data.rest.urllib3.PoolManager')
    def test_remove_archive(self, mock_constructor):
        """Test case for remove_archive

        Remove a archive with simulated success.
        """
        fake_response = RESTResponse(HTTPResponse(
            body=b'"Success"\\n',
            status=200,
        ))
        mock_constructor.return_value.request.return_value = fake_response

        self.api = ConductorApi()

        result = self.api.remove_archive(archive_uuid=self.archive_uuid)

        # The API will throw an exception on failure.
        # Otherwise, there's no data returned by this method.
        self.assertEqual(None, result)

    @patch('digital.forge.data.rest.urllib3.PoolManager')
    def test_remove_archive_failed(self, mock_constructor):
        """Test case for remove_archive

        Remove a archive with simulated failure.
        """
        fake_response = RESTResponse(HTTPResponse(
            body=b'"Failure"\\n',
            status=500,
        ))
        mock_constructor.return_value.request.return_value = fake_response

        self.api = ConductorApi()

        with self.assertRaises(ApiException):
            self.api.remove_archive(archive_uuid=self.archive_uuid)

    @patch('digital.forge.data.rest.urllib3.PoolManager')
    def test_remove_drone(self, mock_constructor):
        """Test case for remove_drone

        Remove a drone with simulated success.
        """
        fake_response = RESTResponse(HTTPResponse(
            body=b'"Success"\\n',
            status=200,
        ))
        mock_constructor.return_value.request.return_value = fake_response

        self.api = ConductorApi()

        result = self.api.remove_drone(drone_uuid=self.drone_uuid)

        # The API will throw an exception on failure.
        # Otherwise, there's no data returned by this method.
        self.assertEqual(None, result)

    @patch('digital.forge.data.rest.urllib3.PoolManager')
    def test_remove_drone_failed(self, mock_constructor):
        """Test case for remove_drone

        Remove a drone with simulated failure.
        """
        fake_response = RESTResponse(HTTPResponse(
            body=b'"Failure"\\n',
            status=500,
        ))
        mock_constructor.return_value.request.return_value = fake_response

        self.api = ConductorApi()

        with self.assertRaises(ApiException):
            self.api.remove_drone(drone_uuid=self.drone_uuid)


if __name__ == '__main__':
    unittest.main()
