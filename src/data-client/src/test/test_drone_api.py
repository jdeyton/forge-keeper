# coding: utf-8
"""
    Forge Keeper - Conductor

    This API focuses on managing data archives and drones that submit data to
    them.

    The version of the OpenAPI document: 1.0.0
    Contact: not@vailable
    Generated by: https://openapi-generator.tech
"""

from __future__ import absolute_import

from datetime import datetime
import unittest
from unittest.mock import patch
from urllib3.response import HTTPResponse

from digital.forge.data.models import Event

from digital.forge.data.api.drone_api import DroneApi
from digital.forge.data.exceptions import ApiException
from digital.forge.data.rest import RESTResponse


class TestDroneApi(unittest.TestCase):
    """DroneApi unit test stubs"""

    def setUp(self):
        self.api = None

        self.example_event = Event(
            archive_uuid='870025c6-78ec-4de8-a394-8049483d923f',
            drone_uuid='a7742c3f-6b78-42a0-aa85-bd4a5214999f',
            event_time=datetime.now(),
            event_value='example-value',
        )

    def tearDown(self):
        pass

    @patch('digital.forge.data.rest.urllib3.PoolManager')
    def test_add_event(self, mock_constructor):
        """Test case for add_event

        Add a data event with a simulated success.
        """
        fake_response = RESTResponse(HTTPResponse(
            body=b'"Success"\\n',
            status=200,
        ))
        mock_constructor.return_value.request.return_value = fake_response

        self.api = DroneApi()

        result = self.api.add_event(event=self.example_event)

        # The API will throw an exception on failure.
        # Otherwise, there's no data returned by this method.
        self.assertEqual(None, result)

    @patch('digital.forge.data.rest.urllib3.PoolManager')
    def test_add_event_failed(self, mock_constructor):
        """Test case for add_event

        Add a data event with a simulated failure.
        """
        fake_response = RESTResponse(HTTPResponse(
            body=b'"Failed"\\n',
            status=500
        ))
        mock_constructor.return_value.request.return_value = fake_response

        self.api = DroneApi()

        with self.assertRaises(ApiException):
            self.api.add_event(event=self.example_event)


if __name__ == '__main__':
    unittest.main()
